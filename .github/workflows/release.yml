---
name: Release

on:
  workflow_dispatch:

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
    steps:
      - name: Branch check
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/rc" ]]; then
            echo "==================================="
            echo "[!] Can only release from rc branch"
            echo "==================================="
            exit 1
          fi

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4
        with:
          ref: rc

      - name: Get Package Version
        id: retrieve-version
        run: |
          PKG_VERSION=$(jq -r .version src/package.json)
          echo "::set-output name=package_version::$PKG_VERSION"

      - name: Check to make sure Desktop release version has been bumped
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_ver=$(hub release -L 1 -f '%T')
          latest_ver=${latest_ver:1}
          echo "Latest version: $latest_ver"
          ver=${{ steps.retrieve-version.outputs.package_version }}
          echo "Version: $ver"
          if [ "$latest_ver" = "$ver" ]; then
            echo "Version has not been bumped!"
            exit 1
          fi

      - name: Download all artifacts
        uses: bitwarden/gh-actions/download-artifacts@23433be15ed6fd046ce12b6889c5184a8d9c8783
        with:
          workflow: build.yml
          workflow_conclusion: success
          branch: rc

      - name: Create release
        uses: ncipollo/release-action@95215a3cb6e6a1908b3c44e00b4fdb15548b1e09  # v2.8.5
        env:
          PKG_VERSION: ${{ steps.retrieve-version.outputs.package_version }}
        with:
          artifacts: "Bitwarden-${{ env.PKG_VERSION }}-amd64.deb,
                      Bitwarden-${{ env.PKG_VERSION }}-x86_64.rpm,
                      Bitwarden-${{ env.PKG_VERSION }}-x64.freebsd,
                      bitwarden_${{ env.PKG_VERSION }}_amd64.snap,
                      Bitwarden-${{ env.PKG_VERSION }}-x86_64.AppImage,
                      latest-linux-prerelease.yml,
                      Bitwarden-Portable-${{ env.PKG_VERSION }}.exe,
                      Bitwarden-Installer-${{ env.PKG_VERSION }}.exe,
                      Bitwarden-${{ env.PKG_VERSION }}-ia32-store.appx,
                      Bitwarden-${{ env.PKG_VERSION }}-x64-store.appx,
                      Bitwarden-${{ env.PKG_VERSION }}-arm64-store.appx,
                      bitwarden.${{ env.PKG_VERSION }}.nupkg,
                      Bitwarden-${{ env.PKG_VERSION }}-mac.zip,
                      Bitwarden-${{ env.PKG_VERSION }}.dmg,
                      Bitwarden-${{ env.PKG_VERSION }}-universal.pkg"
                      #Bitwarden-${{ env.PKG_VERSION }}-masdev-universal.zip
          commit: ${{ github.sha }}
          tag: v${{ env.PKG_VERSION }}
          name: Version ${{ env.PKG_VERSION }}
          body: "<insert release notes here>"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true


  update-release-assets:
    name: Update Release Assets
    if: false
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Rename publish asset
        run: |
          curl \
              -H "Authorization:token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept:application/vnd.github.v3+json" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
              | jq -r " .[] | select( .tag_name == \"$_TAG_VERSION\")" > release.json

          echo "=====RELEASE====="
          echo Release:
          #cat release.json

          RELEASE_UPLOAD_URL=$(cat release.json | jq -r ' .upload_url ' | cut -d { -f 1)
          cat release.json | jq -rc ' .assets[] | select( .name | test("latest.*[yml|json]")) | {name: .name,  url: .url, content_type: .content_type}' > release_assets.jsonl

          echo "=====ASSETS====="
          echo Release Upload URL: $RELEASE_UPLOAD_URL
          echo Release Assets:
          cat release_assets.jsonl

          while read -r asset; do
              FILE_NAME=$(echo $asset | jq -r '.name')
              FILE_URL=$(echo $asset | jq -r '.url')
              FILE_ID=$(echo $asset | jq -r '.id')
              echo "Asset name: $FILE_NAME"
              echo "Asset url: $FILE_URL"

              echo "Grabbing asset..."
              curl \
                  -L -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/octet-stream" \
                  $FILE_URL --output  $FILE_NAME

              NEW_FILE_SIZE=$(wc -c < $FILE_NAME | xargs)
              echo "New file size: $NEW_FILE_SIZE"
              echo "New file name: $FILE_NAME"
              echo "================"

              echo "Deleting remote asset..."
              curl \
                  -X DELETE \
                  -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "accept: application/vnd.github.v3+json" \
                  $FILE_URL

              echo "Pushing updated asset..."
              curl \
                  -X POST \
                  -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "content-type: text/yaml" \
                  -H "content-length: $NEW_FILE_SIZE" \
                  --data-binary @$FILE_NAME \
                  "$RELEASE_UPLOAD_URL?name=prerelease-$FILE_NAME" --http1.1
          done < release_assets.jsonl
